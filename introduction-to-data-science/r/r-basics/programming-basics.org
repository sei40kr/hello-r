* Programming Basics

** Conditional expressions
Here

#+begin_src jupyter-R :session R :async yes
a <- 0

if (a != 0) {
  print(1 / a)
} else {
  print("No reciprocal for 0.")
}
#+end_src
#+RESULTS:
: [1] "No reciprocal for 0."

#+begin_src jupyter-R :session R :async yes
library(dslabs)
data(murders)
murder_rate <- murders$total / murders$population * 100000
#+end_src

#+RESULTS:

#+begin_src jupyter-R :session R :async yes
ind <- which.min(murder_rate)

if (murder_rate[ind] < 0.5) {
  print(murders$state[ind])
} else {
  print("No state has murder rate that low")
}
#+end_src

#+RESULTS:
: [1] "Vermont"

#+begin_src jupyter-R :session R :async yes
if (murder_rate[ind] < 0.25) {
  print(murders$state[ind])
} else {
  print("No state has murder rate that low")
}
#+end_src

#+RESULTS:
: [1] "No state has murder rate that low"

#+begin_src jupyter-R :session R :async yes
a <- 0
ifelse(a > 0, 1 / a, NA)
#+end_src

#+RESULTS:
#+begin_export markdown
&lt;NA&gt;
#+end_export

** Defining functions

#+begin_src jupyter-R :session R :async yes
avg <- function(x) {
  s <- sum(x)
  n <- length(x)
  s / n
}
#+end_src

#+RESULTS:

#+begin_src jupyter-R :session R :async yes
x <- 1:100
identical(mean(x), avg(x))
#+end_src

#+RESULTS:
#+begin_export markdown
TRUE
#+end_export

#+begin_src jupyter-R :session R :async yes
avg <- function(x, arithmetic = TRUE) {
  n <- length(x)
  ifelse(arithmetic, sum(x) / n, prod(x)^(1 / n))
}
#+end_src

#+RESULTS:

** For-loops

#+begin_src jupyter-R :session R :async yes
compute_s_n <- function(n) {
  x <- 1:n
  sum(x)
}
#+end_src

#+RESULTS:

#+begin_src jupyter-R :session R :async yes
for (i in 1:5) {
  print(i)
}
#+end_src

#+RESULTS:
: [1] 1
: [1] 2
: [1] 3
: [1] 4
: [1] 5

#+begin_src jupyter-R :session R :async yes
m <- 25
s_n <- vector(length = m)
for (n in 1:m) {
  s_n[n] <- compute_s_n(n)
}
#+end_src

#+RESULTS:

#+begin_src jupyter-R :session R :async yes
n <- 1:m
plot(n, s_n)
#+end_src

#+RESULTS:
:RESULTS:
#+attr_org: :width 420 :height 420
[[file:./.ob-jupyter/1ec633e61f82053e097b915062bbced20dcab50f.png]]
:END:

** Vectorization and functionals

#+begin_src jupyter-R :session R :async yes
x <- 1:10
sqrt(x)
y <- 1:10
x * y
#+end_src

#+RESULTS:
:RESULTS:
#+begin_export MARKDOWN
1. 1
2. 1.4142135623731
3. 1.73205080756888
4. 2
5. 2.23606797749979
6. 2.44948974278318
7. 2.64575131106459
8. 2.82842712474619
9. 3
10. 3.16227766016838
#+end_export
#+begin_export markdown
1. 1
2. 4
3. 9
4. 16
5. 25
6. 36
7. 49
8. 64
9. 81
10. 100
#+end_export
:END:

#+begin_src jupyter-R :session R :async yes
x <- 1:10
sapply(x, sqrt)
#+end_src

#+RESULTS:
#+begin_export markdown
1. 1
2. 1.4142135623731
3. 1.73205080756888
4. 2
5. 2.23606797749979
6. 2.44948974278318
7. 2.64575131106459
8. 2.82842712474619
9. 3
10. 3.16227766016838
#+end_export

#+begin_src jupyter-R :session R :async yes
n <- 1:25
s_n <- sapply(n, compute_s_n)
#+end_src

#+RESULTS:

** Exercises

*** Exercise 4

#+begin_src jupyter-R :session R :async yes
sum_n <- function(n) {
  sum(1:n)
}
sum_n(5000)
#+end_src

#+RESULTS:
#+begin_export markdown
12502500
#+end_export

*** Exercise 7

#+begin_src jupyter-R :session R :async yes
compute_s_n <- function(n) {
  sum(sapply(1:n, function(x) {
    x**2
  }))
}
compute_s_n(10)
#+end_src

#+RESULTS:
#+begin_export markdown
385
#+end_export

*** Exercise 8

#+begin_src jupyter-R :session R :async yes
s_n <- vector("numeric", 25)
for (n in 1:25) {
  s_n[n] <- compute_s_n(n)
}
s_n
#+end_src

#+RESULTS:
#+begin_export markdown
1. 1
2. 5
3. 14
4. 30
5. 55
6. 91
7. 140
8. 204
9. 285
10. 385
11. 506
12. 650
13. 819
14. 1015
15. 1240
16. 1496
17. 1785
18. 2109
19. 2470
20. 2870
21. 3311
22. 3795
23. 4324
24. 4900
25. 5525
#+end_export

*** Exercise 9

#+begin_src jupyter-R :session R :async yes
s_n <- sapply(1:25, compute_s_n)
s_n
#+end_src

#+RESULTS:
#+begin_export markdown
1. 1
2. 5
3. 14
4. 30
5. 55
6. 91
7. 140
8. 204
9. 285
10. 385
11. 506
12. 650
13. 819
14. 1015
15. 1240
16. 1496
17. 1785
18. 2109
19. 2470
20. 2870
21. 3311
22. 3795
23. 4324
24. 4900
25. 5525
#+end_export

*** Exercise 11

#+begin_src jupyter-R :session R :async yes
plot(1:25, s_n)
#+end_src

#+RESULTS:
:RESULTS:
#+attr_org: :width 420 :height 420
[[file:./.ob-jupyter/163f3696fee08b48811ab0b79526df08ef8a16da.png]]
:END:
